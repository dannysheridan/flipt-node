/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { FliptApi } from "@flipt-io/flipt";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    token?: core.Supplier<core.BearerToken>;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async create(
    segmentKey: string,
    request: FliptApi.ConstraintCreateRequest
  ): Promise<FliptApi.constraints.create.Response> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Production,
        `/api/v1/segments/${segmentKey}/constraints/`
      ),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      body: await serializers.constraints.create.Request.json({
        type: request.type,
        property: request.property,
        operator: request.operator,
        value: request.value,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.constraints.create.Response.parse(
          _response.body as serializers.constraints.create.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: FliptApi.constraints.create.Error._unknown(_response.error),
    };
  }

  public async delete(segmentKey: string, id: string): Promise<FliptApi.constraints.delete.Response> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Production,
        `/api/v1/segments/${segmentKey}/constraints//${id}`
      ),
      method: "DELETE",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: undefined,
      };
    }

    return {
      ok: false,
      error: FliptApi.constraints.delete.Error._unknown(_response.error),
    };
  }

  public async update(
    segmentKey: string,
    id: string,
    request: FliptApi.ConstraintUpdateRequest
  ): Promise<FliptApi.constraints.update.Response> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Production,
        `/api/v1/segments/${segmentKey}/constraints//${id}`
      ),
      method: "PUT",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      body: await serializers.constraints.update.Request.json({
        type: request.type,
        property: request.property,
        operator: request.operator,
        value: request.value,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: undefined,
      };
    }

    return {
      ok: false,
      error: FliptApi.constraints.update.Error._unknown(_response.error),
    };
  }
}
