/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { FliptApi } from "@flipt-io/flipt";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    token?: core.Supplier<core.BearerToken>;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async list(flagKey: string, request?: FliptApi.RuleListRequest): Promise<FliptApi.rules.list.Response> {
    const _queryParams = new URLSearchParams();
    if (request?.limit != null) {
      _queryParams.append("limit", request?.limit.toString());
    }

    if (request?.offset != null) {
      _queryParams.append("offset", request?.offset.toString());
    }

    if (request?.pageToken != null) {
      _queryParams.append("pageToken", request?.pageToken);
    }

    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, `/api/v1/flags/${flagKey}/rules/`),
      method: "GET",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      queryParameters: _queryParams,
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.rules.list.Response.parse(_response.body as serializers.rules.list.Response.Raw),
      };
    }

    return {
      ok: false,
      error: FliptApi.rules.list.Error._unknown(_response.error),
    };
  }

  public async create(flagKey: string, request: FliptApi.RuleCreateRequest): Promise<FliptApi.rules.create.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, `/api/v1/flags/${flagKey}/rules/`),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      body: await serializers.rules.create.Request.json({
        segmentKey: request.segmentKey,
        rank: request.rank,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.rules.create.Response.parse(_response.body as serializers.rules.create.Response.Raw),
      };
    }

    return {
      ok: false,
      error: FliptApi.rules.create.Error._unknown(_response.error),
    };
  }

  public async order(flagKey: string, request: FliptApi.RuleOrder): Promise<FliptApi.rules.order.Response> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Production,
        `/api/v1/flags/${flagKey}/rules//order`
      ),
      method: "PUT",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      body: await serializers.rules.order.Request.json({
        ruleIds: request.ruleIds,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: undefined,
      };
    }

    return {
      ok: false,
      error: FliptApi.rules.order.Error._unknown(_response.error),
    };
  }

  public async get(flagKey: string, id: string): Promise<FliptApi.rules.get.Response> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Production,
        `/api/v1/flags/${flagKey}/rules//${id}`
      ),
      method: "GET",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.rules.get.Response.parse(_response.body as serializers.rules.get.Response.Raw),
      };
    }

    return {
      ok: false,
      error: FliptApi.rules.get.Error._unknown(_response.error),
    };
  }

  public async delete(flagKey: string, id: string): Promise<FliptApi.rules.delete.Response> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Production,
        `/api/v1/flags/${flagKey}/rules//${id}`
      ),
      method: "DELETE",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: undefined,
      };
    }

    return {
      ok: false,
      error: FliptApi.rules.delete.Error._unknown(_response.error),
    };
  }

  public async update(
    flagKey: string,
    id: string,
    request: FliptApi.RuleUpdateRequest
  ): Promise<FliptApi.rules.update.Response> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Production,
        `/api/v1/flags/${flagKey}/rules//${id}`
      ),
      method: "PUT",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      body: await serializers.rules.update.Request.json({
        segmentKey: request.segmentKey,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: undefined,
      };
    }

    return {
      ok: false,
      error: FliptApi.rules.update.Error._unknown(_response.error),
    };
  }
}
