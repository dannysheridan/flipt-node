/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { FliptApi } from "@flipt-io/flipt";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    token?: core.Supplier<core.BearerToken>;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async listTokens(): Promise<FliptApi.auth.listTokens.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/auth/v1/tokens"),
      method: "GET",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.auth.listTokens.Response.parse(
          _response.body as serializers.auth.listTokens.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: FliptApi.auth.listTokens.Error._unknown(_response.error),
    };
  }

  public async getToken(id: string): Promise<FliptApi.auth.getToken.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, `/auth/v1/tokens/${id}`),
      method: "GET",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.auth.getToken.Response.parse(_response.body as serializers.auth.getToken.Response.Raw),
      };
    }

    return {
      ok: false,
      error: FliptApi.auth.getToken.Error._unknown(_response.error),
    };
  }

  public async deleteToken(id: string): Promise<FliptApi.auth.deleteToken.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, `/auth/v1/tokens/${id}`),
      method: "DELETE",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: undefined,
      };
    }

    return {
      ok: false,
      error: FliptApi.auth.deleteToken.Error._unknown(_response.error),
    };
  }

  public async getSelf(): Promise<FliptApi.auth.getSelf.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/auth/v1/self"),
      method: "GET",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.auth.getSelf.Response.parse(_response.body as serializers.auth.getSelf.Response.Raw),
      };
    }

    return {
      ok: false,
      error: FliptApi.auth.getSelf.Error._unknown(_response.error),
    };
  }

  public async expireSelf(
    request?: FliptApi.AuthenticationExpireSelfRequest
  ): Promise<FliptApi.auth.expireSelf.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/auth/v1/self/expire"),
      method: "PUT",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      body: await serializers.auth.expireSelf.Request.json({
        expiresAt: request?.expiresAt,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: undefined,
      };
    }

    return {
      ok: false,
      error: FliptApi.auth.expireSelf.Error._unknown(_response.error),
    };
  }

  public async createToken(
    request: FliptApi.AuthenticationTokenCreateRequest
  ): Promise<FliptApi.auth.createToken.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/auth/v1/method/token"),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      body: await serializers.auth.createToken.Request.json({
        name: request.name,
        description: request.description,
        expiresAt: request.expiresAt,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.auth.createToken.Response.parse(
          _response.body as serializers.auth.createToken.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: FliptApi.auth.createToken.Error._unknown(_response.error),
    };
  }
}
